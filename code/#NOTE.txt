(!) << 이건 임시로 제작했거나 수정하거나 없어질 수도 있는 파일

main.py			각 모듈들을 통합해서 실행하는 메인 프로그램, 카메라를 읽고 영상처리 후 CBS를 실행해서 로봇에게 명령 발행

grid.py			저장된 그리드를 불러오는 모듈, 실행 시 그리드 편집 가능
interface.py 		슬라이더나 마우스 이벤트 등 사용자 입력 및 화면 출력용 모듈
config.py			각종 고정값 정의하는 설정 파일, 각 모듈에서 공통으로 불러와 사용

cbs_tester.py		main에서 영상처리를 빼고 cbs만을 남기고 시뮬레이터를 추가한 프로그램, 새로운 cbs 기능을 여기서 개발하고 main으로 옮김. 현재는 시뮬레이터를 여기서만 불러서 사용함
simulator.py		영상처리나 통신 없이 가상 로봇의 거동을 시뮬레이션 해보기 위해 로봇과 시뮬레이터 클래스가 정의된 모듈
commandSendTest3.py	생성한 경로를 로봇에게 통신으로 전달하기 위한 명령 변환 및 송신 모듈
(!)fake_mqtt.py		통신을 흉내내기 위해 가상 로봇과 통신하기 위한 가짜 mqtt 모듈
(!)DirectionCheck.py	로봇 각도와 방향을 피드백하기 위한 모듈

(!)FB_tester.py		로봇 하드웨어의 피드백 기능 개발을 위해 만든 카메라 중심으로 피드백하도록 만든 피드백 테스터 프로그램

==cbs==			CBS 관련 내부 모듈을 모아둔 폴더

(!)pathfinder.py		main에서 호출되어 cbs를 실행하는 모듈, 지금은 테스트용 cbs가 1개 + CBS 경과가 바로 path지만 나중에 다른 기능이 필요하다면 경로 탐색을 전담할 모듈 
agent.py 			cbs 실행에 필요한 입력 정보, 실행 후 출력 정보를 담는 클래스를 정의한 모듈. 출발지, 도착지, 딜레이, 경로 정보 등을 저장함
cbs_manager.py		MAPF-ICBS 폴더 속에 있는 파일을 호출해 CBS를 계산하는 모듈

==vision==		영상처리 관련 내부 모듈을 모아둔 폴더

visionsystem.py		main에서 생 프레임를 입력받고 영상처리를 실행하고 태그 정보를 출력하는 모듈, 보드와 태그 인식을 병렬적으로 실행하고 둘 다 완료 시 정보를 계산. 영상처리 파트 가장 상위 모듈
board.py			화면을 입력 받아 실험장 보드를 인식해서 출력하는 모듈, 이외에도 보드 관련 정보를 다 저장하는 클래스
board_tag.py		보드용 태그로 보드를 인식하도록 board 모듈을 오버라이딩하는 모듈
apriltag.py		apriltag의 인식, 보드 + 태그 인식 후 보드 정보와 합쳐서 태그 정보를 연산하는 모듈
camera.py		카메라 설정, 카메라 열기 및 왜곡 보정 등 카메라 관련 기능이 들어있는 모듈
(!)tracking.py		태그의 속도나 상태를 추적하는 모듈

==misc== 		기타 유틸리티, 테스트용 파일 모아둔 폴더, 다른 프로그램에서 불러오거나 실행시키지 않음

calibration.py		새로운 카메라 혹은 렌즈의 왜곡 보정 계수를 구하기 위한 프로그램
...

